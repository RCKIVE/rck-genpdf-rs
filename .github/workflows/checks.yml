name: checks

on:
  push:

jobs:
  check:
    name: cargo check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - uses: actions/checkout@v3

      - uses: actions-rs/cargo@v1
        with:
          command: check
          args: --release --all-features

  fmt-clippy:
    name: cargo fmt && clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - uses: actions/checkout@v3

      - uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  tests:
    name: cargo test
    runs-on: ubuntu-22.04
    container: ghcr.io/rckive/rckive-genpdf-rs-ci:renovate-printpdf-0.x
    steps:
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - uses: actions/checkout@v3

      - run: rustup toolchain install nightly

      - name: Generate code coverage
        run: |
          cargo +nightly tarpaulin --verbose --all-features --workspace --timeout 120 --out Xml

      - name: Upload coverage reports to Codecov with GitHub Action
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: true

      - name: Generate PDFs
        if: failure()
        run: |
          for FILE in $(find tests/files -name '*.pdf' -not -name '*.new.pdf'); do
            echo "Converting file $FILE"
            magick convert \
              -density 300 \
              -define png:color-type=6 \
              -resize 25% \
              $FILE \
              -alpha remove \
              -background white \
              -append \
              ${FILE}.png

            NEW=$(echo $FILE | sed -e 's/.pdf/.new.pdf/')

            echo "Converting file $NEW"
            magick convert \
              -density 300 \
              -define png:color-type=6 \
              -resize 25% \
              $NEW \
              -alpha remove \
              -background white \
              -append \
              ${NEW}.png

            magick compare ${FILE}.png ${NEW}.png -density 300 ${FILE}.diff.png
            magick montage ${FILE}.png ${NEW}.png ${FILE}.diff.png -geometry +10+10 ${FILE}.montage.png
          done

      - name: Save PDFs and diffs as artifacts
        uses: actions/upload-artifact@v3
        with:
          name: test-pdfs
          path: |
            tests/files/*.pdf
            tests/files/*.montage.png
